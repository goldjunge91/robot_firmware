name: Create Release

# Manual trigger only - create releases when you're ready
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PICO_SDK_PATH: ~/pico/pico-sdk
  SDK_VERSION: 1.5.1

jobs:
  create-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Get commit SHA
        id: get-commit-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        id: check-tag
        run: |
          if git rev-parse ${{ github.event.inputs.version }} >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and push tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      - name: Tag already exists
        if: steps.check-tag.outputs.exists == 'true'
        run: |
          echo "⚠️ Tag ${{ github.event.inputs.version }} already exists. Using existing tag."

      - name: Cache Pico SDK
        id: cache-pico-sdk
        uses: actions/cache@v3
        with:
          path: ${{ env.PICO_SDK_PATH }}
          key: ${{ runner.os }}-pico-sdk-${{ env.SDK_VERSION }}

      - name: Setup ARM toolchain
        run: |
          sudo apt update
          sudo apt install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential

      - name: Setup Pico SDK
        if: steps.cache-pico-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p $(dirname ${{ env.PICO_SDK_PATH }})
          git clone https://github.com/raspberrypi/pico-sdk.git --depth 1 --branch ${{ env.SDK_VERSION }} ${{ env.PICO_SDK_PATH }}
          cd ${{ env.PICO_SDK_PATH }}
          git submodule update --init

      - name: Build firmware
        run: |
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)

      - name: Generate build artifacts
        run: |
          cd build/src
          # Generate checksums
          sha256sum my_firmware.uf2 > my_firmware.uf2.sha256
          sha256sum my_firmware.elf > my_firmware.elf.sha256
          
          # Get firmware size info
          arm-none-eabi-size my_firmware.elf > firmware_size.txt
          
          # Create build info with German date format (dd.mm.yyyy)
          echo "my_steel Robot Firmware Build Information" > build_info.txt
          echo "==========================================" >> build_info.txt
          echo "" >> build_info.txt
          echo "Version: ${{ github.event.inputs.version }}" >> build_info.txt
          echo "Build Date: $(date +'%d.%m.%Y %H:%M:%S')" >> build_info.txt
          echo "Commit: ${{ github.sha }}" >> build_info.txt
          echo "Commit (short): ${{ steps.get-commit-sha.outputs.sha }}" >> build_info.txt
          echo "Branch: ${{ github.ref_name }}" >> build_info.txt
          echo "" >> build_info.txt
          echo "Build Environment:" >> build_info.txt
          echo "  - Pico SDK: ${{ env.SDK_VERSION }}" >> build_info.txt
          echo "  - Runner OS: ubuntu-latest" >> build_info.txt
          echo "  - Toolchain: gcc-arm-none-eabi" >> build_info.txt
          echo "" >> build_info.txt
          echo "Files in this release:" >> build_info.txt
          echo "  - my_firmware.uf2 (flashable binary)" >> build_info.txt
          echo "  - my_firmware.elf (debug symbols)" >> build_info.txt
          echo "  - my_firmware.uf2.sha256 (checksum)" >> build_info.txt
          echo "  - my_firmware.elf.sha256 (checksum)" >> build_info.txt
          echo "  - firmware_size.txt (memory usage)" >> build_info.txt
          echo "  - build_info.txt (this file)" >> build_info.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "my_steel Robot Firmware ${{ github.event.inputs.version }}"
          body: |
            ## my_steel Robot Firmware Release
            
            **Version:** ${{ github.event.inputs.version }}
            **Commit:** ${{ steps.get-commit-sha.outputs.sha }}
            
            ### Installation
            1. Download `my_firmware.uf2`
            2. Hold BOOTSEL button on Pico while connecting USB
            3. Drag and drop the .uf2 file to the RPI-RP2 drive
            
            ### Release Files
            - `my_firmware.uf2` - Flashable firmware binary
            - `my_firmware.elf` - Debug symbols for debugging
            - `my_firmware.uf2.sha256` - SHA256 checksum for .uf2
            - `my_firmware.elf.sha256` - SHA256 checksum for .elf
            - `firmware_size.txt` - Memory usage information
            - `build_info.txt` - Complete build information (with German date format)
            
            ### Verification
            Verify file integrity with:
            ```bash
            sha256sum -c my_firmware.uf2.sha256
            ```
            
            ### Changes
            See commit history for details.
          files: |
            build/src/my_firmware.uf2
            build/src/my_firmware.elf
            build/src/my_firmware.uf2.sha256
            build/src/my_firmware.elf.sha256
            build/src/firmware_size.txt
            build/src/build_info.txt
          draft: false
          prerelease: false