name: Release Firmware

# Trigger:
# 1. workflow_dispatch: Manual trigger with version bump selection
# 2. push to main: Automatic release when code is merged to main branch
on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump level (major, minor, or patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches: [ "main", "tb6612_fw" ]

env:
  PICO_SDK_PATH: ~/pico/pico-sdk
  SDK_VERSION: 1.5.1

jobs:
  # Job 1: Determine version bump
  determine-version:
    name: Determine Version Bump
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.get-bump.outputs.bump }}
      commit_sha: ${{ steps.get-commit-sha.outputs.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA
        id: get-commit-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get version bump from commit message (for pushes)
        id: get-bump
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "bump=${{ github.event.inputs.bump }}" >> $GITHUB_OUTPUT
          else
            # Parse commit message for version bump keywords
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            if echo "$COMMIT_MSG" | grep -qiE '\[major\]|breaking change|BREAKING CHANGE'; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif echo "$COMMIT_MSG" | grep -qiE '\[minor\]|feat:|feature:'; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMIT_MSG" | grep -qiE '\[patch\]|fix:|bugfix:|chore:|docs:|ci:'; then
              echo "bump=patch" >> $GITHUB_OUTPUT
            else
              # Default to patch for any other commit
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

  # Job 2: Build and create release (only if version bump is needed)
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.bump != 'none' && needs.determine-version.outputs.bump != ''
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Get latest SemVer tag
        id: get-latest-tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          semver_only: true
          initial_version: v0.0.0

      - name: Bump version
        id: bump-semver
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ needs.determine-version.outputs.bump }}

      - name: Create and push new tag
        run: |
          git tag ${{ steps.bump-semver.outputs.new_version }}
          git push origin ${{ steps.bump-semver.outputs.new_version }}

      - name: Cache Pico SDK
        id: cache-pico-sdk
        uses: actions/cache@v3
        with:
          path: ${{ env.PICO_SDK_PATH }}
          key: ${{ runner.os }}-pico-sdk-${{ env.SDK_VERSION }}

      - name: Setup ARM toolchain and build dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential

      - name: Setup Pico SDK
        if: steps.cache-pico-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p $(dirname ${{ env.PICO_SDK_PATH }})
          git clone https://github.com/raspberrypi/pico-sdk.git --depth 1 --branch ${{ env.SDK_VERSION }} ${{ env.PICO_SDK_PATH }}
          cd ${{ env.PICO_SDK_PATH }}
          git submodule update --init

      - name: Build firmware
        run: |
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)

      - name: Generate build artifacts
        run: |
          cd build
          # Generate checksums
          sha256sum src/my_firmware.uf2 > my_firmware.uf2.sha256
          sha256sum src/my_firmware.elf > my_firmware.elf.sha256
          # Get firmware size info
          arm-none-eabi-size src/my_firmware.elf > firmware_size.txt
          # Create build info
          echo "Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > build_info.txt
          echo "Commit: ${{ github.sha }}" >> build_info.txt
          echo "Version: ${{ steps.bump-semver.outputs.new_version }}" >> build_info.txt
          echo "Branch: ${{ github.ref_name }}" >> build_info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ steps.bump-semver.outputs.new_version }}
          path: |
            build/src/my_firmware.uf2
            build/src/my_firmware.elf
            build/*.sha256
            build/firmware_size.txt
            build/build_info.txt
          retention-days: 90

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump-semver.outputs.new_version }}
          name: "my_steel Robot Firmware ${{ steps.bump-semver.outputs.new_version }}"
          body: |
            ## my_steel Robot Firmware Release
            
            **Version:** ${{ steps.bump-semver.outputs.new_version }}
            **Commit:** ${{ needs.determine-version.outputs.commit_sha }}
            
            ### Installation
            1. Download `my_firmware.uf2`
            2. Hold BOOTSEL button on Pico while connecting USB
            3. Drag and drop the .uf2 file to the RPI-RP2 drive
            
            ### Files
            - `my_firmware.uf2` - Flashable firmware binary
            - `my_firmware.elf` - Debug symbols
            - `*.sha256` - Checksums for verification
            - `firmware_size.txt` - Memory usage information
            - `build_info.txt` - Build metadata
            
            ### Changes
            See commit history for details.
          files: |
            build/src/my_firmware.uf2
            build/src/my_firmware.elf
            build/*.sha256
            build/firmware_size.txt
            build/build_info.txt
          draft: false
          prerelease: false
